---
# Role Variables: create_vms
ssh_keys_dir: ../ssh
ssh_users:
  - name: mbick
    id:   1000

ssh_user:     mbick
api_user:     ansible@pve
api_password: password # TODO: encrypt this
api_host:     node1
location:     los_angeles

# Assumes that we are creating a vm from a template, that has cloud-init
# functionality
gateway:  192.168.1.1
vms:
  - name:     docker01
    vmid:     110
    node:     node1
    template: ubuntu-bionic
    memory:   2048
    sockets:  1
    cores:    1
    # TODO: pull automatically from the hosts file and enable DHCP functionality
    ip:       192.168.1.120
    groups:
      - docker_host
      - ubuntu


# Role Variables: gen_docker_compose
docker_compose_file_version: 3.7
src_dir: ../src # on the local machine

ct_users:
  - name: media
    id: 10000
containers:
  - name: transmission
    image: linuxserver/transmission:145
    user: media
    volumes:
      - source: transmission-config
        dest: /config
      - source: downloads
        dest: /downloads
      - source: transmission-watch
        dest: /watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
  - name: radarr
    image: linuxserver/radarr:134
    user: media
    volumes:
      - source: radarr-config
        dest: /config
      - source: downloads
        dest: /downloads
      - source: movies
        dest: /movies
    ports:
      - 7878:7878

mount_dir: /mnt/volumes
rclone_dir: gt-onedrive:/mbick-server
volumes:
  - name: movies
    type: rclone
    owner: media
    encrypt: yes
  # - name: tv-shows
  #   type: rclone
  #   owner: media
  #   encrypt: yes
  - name: downloads
    type: mount-dir
    owner: media
  - name: transmission-watch
    type: local
    owner: media
  - name: transmission-config
    type: bind
    source: "{{ docker_dir }}/transmission/config"
    owner: media
  - name: radarr-config
    type: local
    source: "{{ docker_dir }}/radarr/config"
    owner: media
  # - name: sonarr-config
  #   type: bind
  #   owner: media

rclone_mount_options: --allow-non-empty

# Pin Docker version 18.06 from the stable channel.
# docker_version: "18.06"

# Allow the admin and zerocool users to access Docker without needing root access.
docker_users: ["vagrant"]

# A couple of examples of authenticating to a Docker registry.
# docker_registries:
#   # Authenticate to the Docker Hub, and allow the "admin" system user acces to it:
#   - username: "mbick"
#     password: ""
#     email: "mafbick@gmail.com"
#     system_user: "{{ docker_users | first }}"
#   # Authenticate to some other private registry and allow "zerocool":
#   - registry_url: "https://your-registry.com"
#     username: "some_other_username"
#     password: "some_other_password"
#     system_user: "zerocool"
#   # Disable logging in to some old registry you don't use anymore:
#   - registry_url: "https://old-registry.com"
#     username: "some_old_username"
#     password: "some_old_password"
#     state: "absent"
